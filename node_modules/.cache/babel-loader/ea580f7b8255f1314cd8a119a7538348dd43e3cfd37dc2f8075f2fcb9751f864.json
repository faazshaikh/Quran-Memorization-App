{"ast":null,"code":"const API_BASE_URL = 'http://localhost:8080/api';\nclass ApiService {\n  async testConnection() {\n    try {\n      console.log('Testing backend connection...');\n      const response = await fetch(`${API_BASE_URL}/auth/health`);\n      const data = await response.json();\n      console.log('Backend connection test result:', data);\n      return true;\n    } catch (error) {\n      console.error('Backend connection test failed:', error);\n      return false;\n    }\n  }\n  async login(email, password) {\n    try {\n      console.log('Attempting login to:', `${API_BASE_URL}/auth/login`);\n      const response = await fetch(`${API_BASE_URL}/auth/login`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email,\n          password\n        })\n      });\n      console.log('Response status:', response.status);\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Error response:', errorText);\n        let errorData;\n        try {\n          errorData = JSON.parse(errorText);\n        } catch (e) {\n          errorData = {\n            error: errorText\n          };\n        }\n        throw new Error(errorData.error || `HTTP ${response.status}: ${response.statusText}`);\n      }\n      const data = await response.json();\n      console.log('Login successful:', data);\n\n      // Store token in localStorage\n      localStorage.setItem('token', data.token);\n      localStorage.setItem('user', JSON.stringify({\n        id: data.id,\n        firstName: data.firstName,\n        lastName: data.lastName,\n        email: data.email,\n        fullName: data.fullName\n      }));\n      return data;\n    } catch (error) {\n      console.error('Login error:', error);\n      if (error.name === 'TypeError' && error.message.includes('fetch')) {\n        throw new Error('Cannot connect to server. Please make sure the backend is running on port 8080.');\n      }\n      throw new Error(error.message);\n    }\n  }\n  async register(firstName, lastName, email, password, confirmPassword) {\n    try {\n      console.log('Attempting registration to:', `${API_BASE_URL}/auth/register`);\n      const response = await fetch(`${API_BASE_URL}/auth/register`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          firstName,\n          lastName,\n          email,\n          password,\n          confirmPassword\n        })\n      });\n      console.log('Response status:', response.status);\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Error response:', errorText);\n        let errorData;\n        try {\n          errorData = JSON.parse(errorText);\n        } catch (e) {\n          errorData = {\n            error: errorText\n          };\n        }\n        throw new Error(errorData.error || `HTTP ${response.status}: ${response.statusText}`);\n      }\n      const data = await response.json();\n      console.log('Registration successful:', data);\n\n      // Store token in localStorage\n      localStorage.setItem('token', data.token);\n      localStorage.setItem('user', JSON.stringify({\n        id: data.id,\n        firstName: data.firstName,\n        lastName: data.lastName,\n        email: data.email,\n        fullName: data.fullName\n      }));\n      return data;\n    } catch (error) {\n      console.error('Registration error:', error);\n      if (error.name === 'TypeError' && error.message.includes('fetch')) {\n        throw new Error('Cannot connect to server. Please make sure the backend is running on port 8080.');\n      }\n      throw new Error(error.message);\n    }\n  }\n  async validateToken() {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        throw new Error('No token found');\n      }\n      const response = await fetch(`${API_BASE_URL}/auth/validate`, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      if (!response.ok) {\n        throw new Error('Invalid token');\n      }\n      return true;\n    } catch (error) {\n      // Clear invalid token\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n      throw new Error(error.message);\n    }\n  }\n  logout() {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n  }\n  getStoredUser() {\n    const user = localStorage.getItem('user');\n    return user ? JSON.parse(user) : null;\n  }\n  getToken() {\n    return localStorage.getItem('token');\n  }\n}\nexport default new ApiService();","map":{"version":3,"names":["API_BASE_URL","ApiService","testConnection","console","log","response","fetch","data","json","error","login","email","password","method","headers","body","JSON","stringify","status","ok","errorText","text","errorData","parse","e","Error","statusText","localStorage","setItem","token","id","firstName","lastName","fullName","name","message","includes","register","confirmPassword","validateToken","getItem","removeItem","logout","getStoredUser","user","getToken"],"sources":["/Users/faazshaikh/Quran-Memorization-App/src/services/api.js"],"sourcesContent":["const API_BASE_URL = 'http://localhost:8080/api';\n\nclass ApiService {\n  \n  async testConnection() {\n    try {\n      console.log('Testing backend connection...');\n      const response = await fetch(`${API_BASE_URL}/auth/health`);\n      const data = await response.json();\n      console.log('Backend connection test result:', data);\n      return true;\n    } catch (error) {\n      console.error('Backend connection test failed:', error);\n      return false;\n    }\n  }\n  async login(email, password) {\n    try {\n      console.log('Attempting login to:', `${API_BASE_URL}/auth/login`);\n      \n      const response = await fetch(`${API_BASE_URL}/auth/login`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ email, password }),\n      });\n\n      console.log('Response status:', response.status);\n      \n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Error response:', errorText);\n        let errorData;\n        try {\n          errorData = JSON.parse(errorText);\n        } catch (e) {\n          errorData = { error: errorText };\n        }\n        throw new Error(errorData.error || `HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      const data = await response.json();\n      console.log('Login successful:', data);\n\n      // Store token in localStorage\n      localStorage.setItem('token', data.token);\n      localStorage.setItem('user', JSON.stringify({\n        id: data.id,\n        firstName: data.firstName,\n        lastName: data.lastName,\n        email: data.email,\n        fullName: data.fullName\n      }));\n\n      return data;\n    } catch (error) {\n      console.error('Login error:', error);\n      if (error.name === 'TypeError' && error.message.includes('fetch')) {\n        throw new Error('Cannot connect to server. Please make sure the backend is running on port 8080.');\n      }\n      throw new Error(error.message);\n    }\n  }\n\n  async register(firstName, lastName, email, password, confirmPassword) {\n    try {\n      console.log('Attempting registration to:', `${API_BASE_URL}/auth/register`);\n      \n      const response = await fetch(`${API_BASE_URL}/auth/register`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          firstName,\n          lastName,\n          email,\n          password,\n          confirmPassword\n        }),\n      });\n\n      console.log('Response status:', response.status);\n      \n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Error response:', errorText);\n        let errorData;\n        try {\n          errorData = JSON.parse(errorText);\n        } catch (e) {\n          errorData = { error: errorText };\n        }\n        throw new Error(errorData.error || `HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      const data = await response.json();\n      console.log('Registration successful:', data);\n\n      // Store token in localStorage\n      localStorage.setItem('token', data.token);\n      localStorage.setItem('user', JSON.stringify({\n        id: data.id,\n        firstName: data.firstName,\n        lastName: data.lastName,\n        email: data.email,\n        fullName: data.fullName\n      }));\n\n      return data;\n    } catch (error) {\n      console.error('Registration error:', error);\n      if (error.name === 'TypeError' && error.message.includes('fetch')) {\n        throw new Error('Cannot connect to server. Please make sure the backend is running on port 8080.');\n      }\n      throw new Error(error.message);\n    }\n  }\n\n  async validateToken() {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        throw new Error('No token found');\n      }\n\n      const response = await fetch(`${API_BASE_URL}/auth/validate`, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error('Invalid token');\n      }\n\n      return true;\n    } catch (error) {\n      // Clear invalid token\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n      throw new Error(error.message);\n    }\n  }\n\n  logout() {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n  }\n\n  getStoredUser() {\n    const user = localStorage.getItem('user');\n    return user ? JSON.parse(user) : null;\n  }\n\n  getToken() {\n    return localStorage.getItem('token');\n  }\n}\n\nexport default new ApiService();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}