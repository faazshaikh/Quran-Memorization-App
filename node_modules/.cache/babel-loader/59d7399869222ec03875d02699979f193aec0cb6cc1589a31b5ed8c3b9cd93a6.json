{"ast":null,"code":"const API_BASE_URL = 'http://localhost:8080/api';\nclass ApiService {\n  async login(email, password) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/auth/login`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email,\n          password\n        })\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.error || 'Login failed');\n      }\n\n      // Store token in localStorage\n      localStorage.setItem('token', data.token);\n      localStorage.setItem('user', JSON.stringify({\n        id: data.id,\n        firstName: data.firstName,\n        lastName: data.lastName,\n        email: data.email,\n        fullName: data.fullName\n      }));\n      return data;\n    } catch (error) {\n      throw new Error(error.message);\n    }\n  }\n  async register(firstName, lastName, email, password, confirmPassword) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/auth/register`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          firstName,\n          lastName,\n          email,\n          password,\n          confirmPassword\n        })\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.error || 'Registration failed');\n      }\n\n      // Store token in localStorage\n      localStorage.setItem('token', data.token);\n      localStorage.setItem('user', JSON.stringify({\n        id: data.id,\n        firstName: data.firstName,\n        lastName: data.lastName,\n        email: data.email,\n        fullName: data.fullName\n      }));\n      return data;\n    } catch (error) {\n      throw new Error(error.message);\n    }\n  }\n  async validateToken() {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        throw new Error('No token found');\n      }\n      const response = await fetch(`${API_BASE_URL}/auth/validate`, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      if (!response.ok) {\n        throw new Error('Invalid token');\n      }\n      return true;\n    } catch (error) {\n      // Clear invalid token\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n      throw new Error(error.message);\n    }\n  }\n  logout() {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n  }\n  getStoredUser() {\n    const user = localStorage.getItem('user');\n    return user ? JSON.parse(user) : null;\n  }\n  getToken() {\n    return localStorage.getItem('token');\n  }\n}\nexport default new ApiService();","map":{"version":3,"names":["API_BASE_URL","ApiService","login","email","password","response","fetch","method","headers","body","JSON","stringify","data","json","ok","Error","error","localStorage","setItem","token","id","firstName","lastName","fullName","message","register","confirmPassword","validateToken","getItem","removeItem","logout","getStoredUser","user","parse","getToken"],"sources":["/Users/faazshaikh/Quran-Memorization-App/src/services/api.js"],"sourcesContent":["const API_BASE_URL = 'http://localhost:8080/api';\n\nclass ApiService {\n  async login(email, password) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/auth/login`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ email, password }),\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.error || 'Login failed');\n      }\n\n      // Store token in localStorage\n      localStorage.setItem('token', data.token);\n      localStorage.setItem('user', JSON.stringify({\n        id: data.id,\n        firstName: data.firstName,\n        lastName: data.lastName,\n        email: data.email,\n        fullName: data.fullName\n      }));\n\n      return data;\n    } catch (error) {\n      throw new Error(error.message);\n    }\n  }\n\n  async register(firstName, lastName, email, password, confirmPassword) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/auth/register`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          firstName,\n          lastName,\n          email,\n          password,\n          confirmPassword\n        }),\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.error || 'Registration failed');\n      }\n\n      // Store token in localStorage\n      localStorage.setItem('token', data.token);\n      localStorage.setItem('user', JSON.stringify({\n        id: data.id,\n        firstName: data.firstName,\n        lastName: data.lastName,\n        email: data.email,\n        fullName: data.fullName\n      }));\n\n      return data;\n    } catch (error) {\n      throw new Error(error.message);\n    }\n  }\n\n  async validateToken() {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        throw new Error('No token found');\n      }\n\n      const response = await fetch(`${API_BASE_URL}/auth/validate`, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error('Invalid token');\n      }\n\n      return true;\n    } catch (error) {\n      // Clear invalid token\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n      throw new Error(error.message);\n    }\n  }\n\n  logout() {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n  }\n\n  getStoredUser() {\n    const user = localStorage.getItem('user');\n    return user ? JSON.parse(user) : null;\n  }\n\n  getToken() {\n    return localStorage.getItem('token');\n  }\n}\n\nexport default new ApiService();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}